{"version":3,"sources":["components.js/Navbar.js","components.js/Article.js","screens/NewsScreen.js","screens/IndiaNews.js","screens/UkNews.js","screens/UsaNews.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","navStyle","color","to","style","Article","article","useState","like","setLike","className","src","image","alt","href","url","rel","target","title","source","name","publishedAt","substr","onClick","e","NewsScreen","articles","console","log","map","EnglishNews","setArticles","keyword","setKeyword","fetchData","a","axios","get","data","item","useEffect","onSubmit","preventDefault","onChange","value","type","Uknews","Axios","UsaNews","App","path","exact","component","IndiaNews","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dea34a3c.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Navbar() {\r\n    const navStyle={\r\n        color:'white'\r\n    }\r\n    return (\r\n        <div>\r\n        <nav>\r\n        <ul>\r\n        <div>\r\n        <Link to='/'>\r\n\r\n       \r\n         <span style={navStyle}>India</span>\r\n        </Link>\r\n\r\n        </div>\r\n        <div>\r\n        <Link to='/us'>\r\n        <span style={navStyle}>United States</span></Link>\r\n\r\n        </div>\r\n        <div>\r\n        <Link to='/uk'><span style={navStyle}>United Kingdom</span></Link>\r\n\r\n        </div>\r\n       \r\n       \r\n        </ul>\r\n        </nav>    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React,{useState} from 'react'\r\n\r\nfunction Article({article}) {\r\n    const [like,setLike]=useState(false)\r\n    return (\r\n        <div>\r\n        <div className='card'>\r\n                    <img src={article.image} alt='news'/>\r\n                    <a href={article.url} rel=\"noopener noreferrer\"  target=\"_blank\"> <h3>{article.title}</h3></a>\r\n                        \r\n                    \r\n                        <p className='small'>Author name:<i>{article.source.name}</i></p>\r\n                        <p className='small'>Publish Date:{article.publishedAt.substr(0,10)}</p>\r\n                        <div className='flex-display'>\r\n                            <button onClick={(e)=>setLike(true)} className='flex'>{like? 'Liked': 'Like'}</button>\r\n                            <button className='flex'>Hide</button>\r\n                        </div>\r\n                    </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Article\r\n","import React, { useState } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport Article from '../components.js/Article';\r\n\r\n\r\n\r\n\r\nfunction NewsScreen({articles}) {\r\n    \r\n    console.log('save data',articles )\r\n    return (\r\n        <div>\r\n            <div className='card-container'>\r\n                    {articles.map(article=>\r\n                    (<Article article={article}/>\r\n                    )\r\n                    )}\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewsScreen\r\n","import React, { useState ,useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom';\r\nimport NewsScreen from './NewsScreen';\r\n// import { articles } from '../articles';\r\n\r\n\r\nfunction EnglishNews() {\r\n    \r\n    const [articles,setArticles]=useState([]);\r\n    const [keyword,setKeyword]=useState('');\r\n\r\n    const fetchData=async(keyword)=>{\r\n        const {data}=await axios.get(`https://gnews.io/api/v4/search?q=${keyword}&country=in&token=31794528b172faa08627769e91e7bf84`)\r\n        const item=data.articles;\r\n        setArticles(item)\r\n\r\n    }\r\n    useEffect(() => {\r\n        fetchData('None')     \r\n    }, [])\r\n\r\n    const handleChange=(e)=>{\r\n        setKeyword(e.target.value)\r\n    }\r\n    const submitHandler=(e)=>{\r\n        e.preventDefault();\r\n        fetchData(keyword)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n         <div className='next'>\r\n         <Link to ='/us'>\r\n         Next Page\r\n         </Link>\r\n            \r\n         </div>\r\n        <div className='search' >\r\n        <form onSubmit={submitHandler}>\r\n             <input onChange={handleChange}/>\r\n            <button type='submit' >Search</button>\r\n         </form>\r\n        </div>\r\n         \r\n       \r\n        <NewsScreen articles={articles}/>            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EnglishNews\r\n","import Axios from 'axios';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport NewsScreen from './NewsScreen';\r\n\r\nfunction Uknews() {\r\n     \r\n    const [articles,setArticles]=useState([]);\r\n    const [keyword,setKeyword]=useState('');\r\n\r\n    const fetchData=async(keyword)=>{\r\n        const {data}=await Axios.get(`https://gnews.io/api/v4/search?q=${keyword}&country=uk&token=31794528b172faa08627769e91e7bf84`)\r\n        const item=data.articles;\r\n        setArticles(item)\r\n\r\n    }\r\n    useEffect(() => {\r\n        fetchData('None')     \r\n    }, [])\r\n\r\n    const handleChange=(e)=>{\r\n        setKeyword(e.target.value)\r\n    }\r\n    const submitHandler=(e)=>{\r\n        e.preventDefault();\r\n        fetchData(keyword)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        <div className='prev'><Link to ='/us'>\r\n         Previous Page\r\n         </Link>\r\n        </div>\r\n       \r\n        <div className='search' >\r\n        <form onSubmit={submitHandler}>\r\n             <input onChange={handleChange}/>\r\n            <button type='submit' >Search</button>\r\n         </form>\r\n        </div>\r\n         \r\n       \r\n        <NewsScreen articles={articles}/>            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Uknews\r\n","import Axios from 'axios';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport NewsScreen from './NewsScreen';\r\n\r\nfunction UsaNews() {\r\n     \r\n    const [articles,setArticles]=useState([]);\r\n    const [keyword,setKeyword]=useState('');\r\n\r\n    const fetchData=async(keyword)=>{\r\n        const {data}=await Axios.get(`https://gnews.io/api/v4/search?q=${keyword}&country=us&token=31794528b172faa08627769e91e7bf84`)\r\n        const item=data.articles;\r\n        setArticles(item)\r\n\r\n    }\r\n    useEffect(() => {\r\n        fetchData('None')     \r\n    }, [])\r\n\r\n    const handleChange=(e)=>{\r\n        setKeyword(e.target.value)\r\n    }\r\n    const submitHandler=(e)=>{\r\n        e.preventDefault();\r\n        fetchData(keyword)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n         <div className='prev'>\r\n         <Link to ='/'>\r\n         Previous Page\r\n         </Link>\r\n            \r\n         </div>\r\n         <div className='next'>\r\n         <Link to ='/uk'>\r\n         Next Page\r\n         </Link>\r\n            \r\n         </div>\r\n        <div className='search' >\r\n        <form onSubmit={submitHandler}>\r\n             <input onChange={handleChange}/>\r\n            <button type='submit' >Search</button>\r\n         </form>\r\n        </div>\r\n         \r\n        \r\n        <NewsScreen articles={articles}/>            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default UsaNews\r\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport './App.css';\nimport Navbar from './components.js/Navbar';\nimport IndiaNews from './screens/IndiaNews';\nimport Uknews from './screens/UkNews';\nimport UsaNews from './screens/UsaNews';\n\nfunction App() {\n  return (<>\n     \n     <BrowserRouter>\n     <Navbar/>\n       <Route path='/' exact={true} component={IndiaNews}/>\n       <Route path='/us' component={UsaNews}/>\n       <Route path='/uk' component={Uknews}/>\n     </BrowserRouter>\n    </>\n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}